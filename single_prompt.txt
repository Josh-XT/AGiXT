INSTRUCTIONS

Read the following function signatures, imagine how they might be implemented, and then use them to simulate the output of the program `run_baby_agi()` when a user asks. Do not return any output other than the simulated function.


FUNCTION SIGNATURES

def execution_agent(objective: str, task: str) -> str:
    """
    Executes a task based on the given objective and previous context.
    Args:
        objective (str): The objective or goal for the AI to perform the task.
        task (str): The task to be executed by the AI.
    Returns:
        str: The response generated by the AI for the given task.
    """
    <your hallucinated implementation>


def task_creation_agent(
    objective: str, result: Dict, task_description: str, task_list: List[str]
):
    """
    This function models a task creation AI that uses the result of an execution agent to create new tasks with a particular objective.
    Args:
        objective (str): The objective or goal for the AI to perform the task.
        result (Dict): The result from the last completed task by the AI.
        task_description (str): The description of the last task completed by the AI.
        task_list (List[str]): A list of incomplete tasks by the AI.
    Returns:
        str: Based on the result of the last task, create new tasks to be completed by the AI system that do not overlap with incomplete tasks.
    """

    <your hallucinated implementation>


def prioritization_agent(objective: str, task_list: List[str]):
    """
    This function models a task prioritization AI tasked with cleaning the formatting of and reprioritizing a list of tasks against a particular objective without removing any tasks.
Args:
        objective (str): The high level objective or goal for the AI to perform.
        task_list (List[str]): A list of outstanding tasks to perform
        this_task_id (str): 
    Returns:
        str: a numbered list of tasks, like:
    #. First task
    #. Second task
    beginning with the next_task_id."""

    <your hallucinated implementation>


def run_baby_agi_one_step(objective: str, priors: str):
    """
    Executes the following program for a single step

    (1) The execution_agent() function is where the OpenAI API is used. It takes two parameters: the objective and the task. It then sends a prompt to OpenAI's API, which returns the result of the task. The prompt consists of a description of the AI system's task, the objective, and the task itself. The result is then returned as a string.
    (3) The task_creation_agent() function is where OpenAI's API is used to create new tasks based on the objective and the result of the previous task. The function takes four parameters: the objective, the result of the previous task, the task description, and the current task list. It then sends a prompt to OpenAI's API, which returns a list of new tasks as strings. The function then returns the new tasks as a list of dictionaries, where each dictionary contains the name of the task.
    (4) The prioritization_agent() function is where OpenAI's API is used to reprioritize the task list. The function takes one parameter, the ID of the current task. It sends a prompt to OpenAI's API, which returns the reprioritized task list as a numbered list.

   Args:
       objective (str): High level objective for the AGI to execute
       priors (str): output from previous execution step of the AGI
    """

    <your hallucinated implementation>

simulate run_baby_agi_one_step("{objective}")