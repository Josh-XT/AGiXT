name: Run Tests
on:
  workflow_call:
    inputs:
      notebook:
        type: string
        required: true
        description: file to run (ending in .ipynb), can be directory to batch run (without trailing slash)
      image:
        type: string
        required: true
      port:
        type: string
      port-mapping:
        type: string
      additional-python-dependencies:
        type: string
        description: add whatever pip you need here
        default: "openai requests agixtsdk qrcode==7.4.2"
      database-type:
        type: string
        default: "postgresql"
        description: "Database type to use"
      report-name:
        type: string
        default: "test-reports"
        description: "Name of the report"
    secrets:
      api-key:
        description: Optional api-key available as os.getenv('API_KEY') in your notebook
      DISCORD_WEBHOOK:
        description: Optional discord webhook available as os.getenv('DISCORD_WEBHOOK') in your notebook
      EZLOCALAI_URI:
        description: Optional ezlocalai uri available as os.getenv('EZLOCALAI_URI') in your notebook
      EZLOCALAI_API_KEY:
        description: Optional ezlocalai api key available as os.getenv('EZLOCALAI_API_KEY') in your notebook
      DEEPSEEK_API_KEY:
        description: Optional deepseek api key available as os.getenv('DEEPSEEK_API_KEY') in your notebook
      AZURE_API_KEY:
        description: Optional azure api-key available as os.getenv('AZURE_API_KEY') in your notebook
      AZURE_DEPLOYMENT_NAME:
        description: Optional azure deployment name available as os.getenv('AZURE_DEPLOYMENT_NAME') in your notebook
      AZURE_OPENAI_ENDPOINT:
        description: Optional azure openai endpoint available as os.getenv('AZURE_OPENAI_ENDPOINT') in your notebook
      AZURE_MODEL:
        description: Optional azure model available as os.getenv('AZURE_MODEL') in your notebook
      GOOGLE_API_KEY:
        description: Optional google api key available as os.getenv('GOOGLE_API_KEY') in your notebook
  
jobs:
  run-tests:
    runs-on: ubuntu-22.04
    env:
      EZLOCALAI_URI: ${{ secrets.EZLOCALAI_URI }}
      EZLOCALAI_API_KEY: ${{ secrets.EZLOCALAI_API_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
    outputs:
      digest: ${{ steps.dockerBuild.outputs.digest }}
    services:
      dbservice:
        image: postgres:latest
        ports:
          - 5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
    steps:
      - uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.10'
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
      - name: Generate .env file
        run: |
          echo "DATABASE_TYPE=${{ inputs.database-type }}" >> .env
          echo "DATABASE_HOST=dbservice" >> .env
          echo "DATABASE_USER=postgres" >> .env
          echo "DATABASE_PASSWORD=postgres" >> .env
          echo "DATABASE_PORT=5432" >> .env
          echo "DATABASE_NAME=postgres" >> .env
          echo "EZLOCALAI_URI=${{ secrets.EZLOCALAI_URI }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          echo "AGIXT_API_KEY=just-a-test" >> .env
          echo "AGIXT_URI=http://agixt:7437" >> .env
          echo "WORKING_DIRECTORY=/agixt/WORKSPACE" >> .env
          echo "TOKENIZERS_PARALLELISM=false" >> .env
          echo "UVICORN_WORKERS=10" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          echo "EZLOCALAI_MAX_TOKENS=65536" >> .env
          echo "DEEPSEEK_MAX_TOKENS=32768" >> .env
          echo "TZ=America/New_York" >> .env
      - name: Start container with .env file and healthchecks
        run: |
          docker run -d --name agixt \
            -p 7437:7437 \
            --env-file .env \
            --health-cmd="curl -f http://localhost:7437 || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            ${{ inputs.image }}
      
      - name: Wait for container health check to pass
        run: |
          for i in {1..30}; do
            # Get the health status from Docker inspect.
            status=$(docker inspect --format='{{json .State.Health.Status}}' agixt | tr -d '"')
            if [ "$status" == "healthy" ]; then
              echo "Container is healthy!"
              exit 0
            fi
            echo "Waiting for container to become healthy (current status: $status)..."
            sleep 2
          done
          echo "Container did not become healthy in time."
          exit 1
      - name: Install Python dependencies
        run: pip3 install jupyter nbconvert[webpdf] ${{ inputs.additional-python-dependencies }}

      - name: Update package lists and install jupyter output generation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --fix-missing -y pandoc texlive-xetex texlive-fonts-recommended texlive-plain-generic curl ffmpeg

      - name: Set notebook and artifact files
        run: |
          notebook="${{ inputs.notebook }}"
          if ${{ endsWith( inputs.notebook, 'ipynb' ) }} ; then
            echo "notebook-file=${notebook}" >> "$GITHUB_ENV"
            echo "artifact-file=${notebook%.*}.pdf"  >> "$GITHUB_ENV"
          else 
            echo "notebook-file=${notebook}/*.ipynb" >> "$GITHUB_ENV"
            echo "artifact-file=${notebook}/*.pdf"  >> "$GITHUB_ENV"
          fi

      - name: Check AGiXT logs
        run: docker logs ${{ job.services.agixt.id }} --follow &

      - name: Execute notebook
        id: execute_notebook
        env:
          API_KEY: ${{ secrets.api-key }}
        run: |
          echo "Executing notebook with strict error checking..."
          
          # First try to execute and generate PDF
          python3 -m nbconvert --execute --log-level INFO --to pdf ${{ env.notebook-file }}
          STRICT_STATUS=$?
          echo "strict_status=${STRICT_STATUS}" >> $GITHUB_ENV
      - name: Rerun allowing errors if strict status is not 0
        if: env.strict_status != '0'
        run: |
          echo "Executing notebook with error tolerance..."
          python3 -m nbconvert --execute --allow-errors --log-level INFO --to pdf ${{ env.notebook-file }}
      - name: Send Report to Discord
        if: always()
        run: |
          # Set message based on stored test outcome
          BRANCH_NAME=$(echo ${{ github.ref }} | awk -F'/' '{print $NF}')
          if [ "${{ github.actor }}" == "Josh-XT" ]; then
            DISCORD_NAME="<@381837595522367488>"
          elif [ "${{ github.actor }}" == "JamesonRGrieve" ]; then
            DISCORD_NAME="<@329145730725838858>"
          elif [ "${{ github.actor }}" == "waiscodes" ]; then
            DISCORD_NAME="<@670762167037067304>"
          elif [ "${{ github.actor }}" == "birdup000" ]; then
            DISCORD_NAME="<@856308374567256074>"
          elif [ "${{ github.actor }}" == "Nick-XT" ]; then
            DISCORD_NAME="<@381908912951001088>"
          else
            DISCORD_NAME="**${{ github.actor }}**"
          fi

          if [ "${{ env.strict_status }}" != "0" ]; then
            MESSAGE="❌ **TEST FAILURE**: **${{ inputs.report-name }}** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit **${{ github.sha }}** by ${DISCORD_NAME} "
          else
            MESSAGE="✅ Test passed: **${{ inputs.report-name }}** on repository **${{ github.repository }}** branch **$BRANCH_NAME** commit **${{ github.sha }}** by **${{ github.actor }}**"
          fi
          FILE_TO_SEND="tests/report.mp4"
          # If it doesn't exist, send the PDF
          if [ ! -f $FILE_TO_SEND ]; then
            FILE_TO_SEND="${{ env.artifact-file }}"
          fi
          echo "Sending Report: $FILE_TO_SEND"
          curl -H "Content-Type:multipart/form-data" \
                -F "file=@$FILE_TO_SEND" \
                -F "content=$MESSAGE" \
                "${{ secrets.DISCORD_WEBHOOK }}"

      - uses: actions/upload-artifact@v4.4.3
        if: always()
        with:
          name: ${{ inputs.report-name }}
          path: ${{ env.artifact-file }}

      - name: Exit with test status
        if: env.strict_status != '0'
        run: exit 1
