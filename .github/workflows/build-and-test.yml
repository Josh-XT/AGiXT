name: Build and Test

on: ["push"]
jobs:
  lint:
    runs-on: ubuntu-22.04
    name: Python Black Lint Check
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: pip install black nbqa

      - name: Run Black on Python files
        run: black --check $(find . -type f -name "*.py")
  build:
    uses: ./.github/workflows/docker.yml
    with:
      registry-dockerhub-enable: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      registry-repo-name: AGiXT
      registry-readme: ./docs/README.md
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  test-agixt-postgres:
    uses: ./.github/workflows/tests.yml
    permissions:
      contents: read
      packages: read
    with:
      notebook: tests/endpoint-tests.ipynb
      image: ${{ needs.build.outputs.primary-image }}
      port: "7437"
      database-type: "postgresql"
      report-name: "agixt-postgres-tests"
    needs: build
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  test-agixt-sqlite:
    uses: ./.github/workflows/tests.yml
    permissions:
      contents: read
      packages: read
    with:
      notebook: tests/endpoint-tests.ipynb
      image: ${{ needs.build.outputs.primary-image }}
      port: "7437"
      database-type: "sqlite"
      report-name: "agixt-sqlite-tests"
    needs: build
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  
  deploy:
    runs-on: ubuntu-22.04
    name: Deploy to dev server
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy Application
        id: deploy
        run: |
          RESPONSE=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}" -X POST "${{ secrets.DEPLOY_URI }}" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.DEPLOY_SECRET }}" \
            -d '{"domain": "${{ secrets.DEPLOY_DOMAIN }}"}')
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS_CODE:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS_CODE:/d')
          
          echo "deploy_response=$RESPONSE_BODY" >> $GITHUB_OUTPUT
          echo "deploy_status=$HTTP_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "Deployment successful with status $HTTP_STATUS"
          else
            echo "Deployment failed with status $HTTP_STATUS"
            exit 1
          fi
          
          # Send Discord Notification
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            STATUS="‚úÖ Success"
            COLOR=3066993
          else
            STATUS="‚ùå Failed"
            COLOR=15158332
          fi
          
          # Escape and truncate response for Discord (max 1024 chars per field)
          if [ ${#RESPONSE_BODY} -gt 1000 ]; then
            RESPONSE_BODY="${RESPONSE_BODY:0:1000}..."
          fi
          RESPONSE_BODY=$(echo "$RESPONSE_BODY" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n' | sed 's/\\n$//')
          
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ Deployment Notification",
                "description": "Deployment from **${{ github.ref_name }}** branch has completed",
                "color": '$COLOR',
                "fields": [
                  {
                    "name": "Status",
                    "value": "'$STATUS' (HTTP '$HTTP_STATUS')",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "Commit",
                    "value": "[${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": true
                  },
                  {
                    "name": "Deploy Response",
                    "value": "```json\n'$RESPONSE_BODY'\n```",
                    "inline": false
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }' || echo "Failed to send Discord notification"

  deploy-release:
    runs-on: ubuntu-22.04
    name: Deploy to everything.software
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Deploy Release Application
        id: deploy-release
        run: |
          RESPONSE=$(curl -s -w "\nHTTP_STATUS_CODE:%{http_code}" -X POST "${{ secrets.DEPLOY_URI }}" \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.DEPLOY_SECRET }}" \
            -d '{"domain": "everything.software"}')
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS_CODE:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS_CODE:/d')
          
          echo "deploy_response=$RESPONSE_BODY" >> $GITHUB_OUTPUT
          echo "deploy_status=$HTTP_STATUS" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "Release deployment successful with status $HTTP_STATUS"
          else
            echo "Release deployment failed with status $HTTP_STATUS"
            exit 1
          fi
          
          # Send Discord Notification for Release
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            STATUS="‚úÖ Success"
            COLOR=3066993
          else
            STATUS="‚ùå Failed"
            COLOR=15158332
          fi
          
          # Escape and truncate response for Discord (max 1024 chars per field)
          if [ ${#RESPONSE_BODY} -gt 1000 ]; then
            RESPONSE_BODY="${RESPONSE_BODY:0:1000}..."
          fi
          RESPONSE_BODY=$(echo "$RESPONSE_BODY" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n' | sed 's/\\n$//')
          
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üéâ Release Deployment Notification",
                "description": "Release **${{ github.ref_name }}** has been deployed to **everything.software**",
                "color": '$COLOR',
                "fields": [
                  {
                    "name": "Status",
                    "value": "'$STATUS' (HTTP '$HTTP_STATUS')",
                    "inline": true
                  },
                  {
                    "name": "Release Tag",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "Domain",
                    "value": "everything.software",
                    "inline": true
                  },
                  {
                    "name": "Commit",
                    "value": "[${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": true
                  },
                  {
                    "name": "Deploy Response",
                    "value": "```json\n'$RESPONSE_BODY'\n```",
                    "inline": false
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }' || echo "Failed to send Discord notification"