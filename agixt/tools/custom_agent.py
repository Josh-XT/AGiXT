import re
from transformers import Agent
from transformers.tools.agents import resolve_tools, get_tool_creation_code
from .python_interpreter import evaluate
from .prompts import RUN_PROMPT_TEMPLATE
from .clients import AgentClient, OpenAiAgentClient
from .custom_tools import SearchTool, ScrapeTextTool, SummarizeTool
from .custom_tools import WriteToFileTool, SaveImageTool, CreateThumbnailTool

def find_code(text):
    match = re.search(r"```(python|py|)\n(?P<code>[\S\s]+?)\n```", text)
    if match:
        return match.group("code")

def clean_code_for_chat(result):
    lines = []
    for line in result.split("\n"):
        if (line.startswith("```")):
            break
        if (line):
            lines.append(line)
    explanation = "\n".join(lines)
    return explanation, find_code(result)


def clean_code_for_run(explanation, result):
    result = f"{explanation} {result}"
    explanation, code = result.split("Answer:")
    return explanation.strip(), find_code(code)

class CustomAgent(Agent):
    def __init__(
        self,
        client: AgentClient,
        chat_prompt_template=None,
        run_prompt_template=None,
        additional_tools=None,
        tools=None
    ):
        self.client = client
        if not run_prompt_template:
            run_prompt_template = RUN_PROMPT_TEMPLATE
        if tools == None:
            tools = [
                SearchTool(),
                ScrapeTextTool(),
                WriteToFileTool(),
                SaveImageTool(),
                CreateThumbnailTool()
            ]
            if isinstance(client, OpenAiAgentClient):
                tools.append(SummarizeTool(client))
            if additional_tools == None:
                additional_tools = tools
            else:
                additional_tools += tools
        super().__init__(
            chat_prompt_template=chat_prompt_template,
            run_prompt_template=run_prompt_template,
            additional_tools=additional_tools,
        )

    def generate_one(self, prompt, stop):
        return self.client.generate(prompt, stop)
    
    def chat(self, task, *, return_code=False, remote=False, **kwargs):
        prompt = self.format_prompt(task, chat_mode=True)
        result = self.generate_one(prompt, stop=["Human:", "====="])
        self.chat_history = prompt + result.strip() + "\n"
        explanation, code = clean_code_for_chat(result)

        print(f"==Explanation from the agent==\n{explanation}")

        if code is not None:
            print(f"\n\n==Code generated by the agent==\n{code}")
            if not return_code:
                print("\n\n==Result==")
                self.cached_tools = resolve_tools(code, self.toolbox, remote=remote, cached_tools=self.cached_tools)
                self.chat_state.update(kwargs)
                return evaluate(code, self.cached_tools, self.chat_state, chat_mode=True)
            else:
                tool_code = get_tool_creation_code(code, self.toolbox, remote=remote)
                return f"{tool_code}\n{code}"

    def run(self, task, *, return_code=False, remote=False, **kwargs):
        prompt = self.format_prompt(task)
        explanation = "I will use the following tool:"
        if "explanation" in kwargs:
            explanation = kwargs["explanation"]
        prompt = prompt.replace('<<explanation>>', explanation)
        result = self.generate_one(prompt, stop=["Task:"])
        explanation, code = clean_code_for_run(explanation, result)

        print(f"==Explanation from the agent==\n{explanation}")

        print(f"\n\n==Code generated by the agent==\n{code}")
        if not return_code:
            print("\n\n==Result==")
            self.cached_tools = resolve_tools(code, self.toolbox, remote=remote, cached_tools=self.cached_tools)
            return evaluate(code, self.cached_tools, state=kwargs.copy())
        else:
            tool_code = get_tool_creation_code(code, self.toolbox, remote=remote)
            return f"{tool_code}\n{code}"